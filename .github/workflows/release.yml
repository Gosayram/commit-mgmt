name: Release

on:
  push:
    branches: [main]
    paths:
      - 'scripts/**'
      - '.pre-commit-hooks.yaml'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get-latest-tag
        run: |
          # Get the latest tag, if no tags exist, start with v0.0.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Calculate next version
        id: calc-version
        run: |
          LATEST_TAG="${{ steps.get-latest-tag.outputs.latest_tag }}"
          
          # Check if this is the first release (no real tags exist)
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            # First release - start with v1.0.0
            NEW_VERSION="v1.0.0"
            BUMP_TYPE="initial"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
            echo "First release: $NEW_VERSION"
          else
            # Remove 'v' prefix and split version parts
            VERSION_NUMBER=${LATEST_TAG#v}
            IFS='.' read -r -a VERSION_PARTS <<< "$VERSION_NUMBER"
            
            MAJOR=${VERSION_PARTS[0]:-0}
            MINOR=${VERSION_PARTS[1]:-0}
            PATCH=${VERSION_PARTS[2]:-0}
            
            # Check commit messages to determine version bump
            COMMIT_MESSAGES=$(git log $LATEST_TAG..HEAD --oneline)
            
            # Determine version bump based on commit messages
            if echo "$COMMIT_MESSAGES" | grep -qE '^\w+\(.*\)!:|BREAKING CHANGE|^\[.*\].*!'; then
              # Major version bump for breaking changes
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              BUMP_TYPE="major"
            elif echo "$COMMIT_MESSAGES" | grep -qE '^(feat|feature|\[ADD\]|\[FEATURE\])'; then
              # Minor version bump for new features
              MINOR=$((MINOR + 1))
              PATCH=0
              BUMP_TYPE="minor"
            else
              # Patch version bump for fixes, docs, etc.
              PATCH=$((PATCH + 1))
              BUMP_TYPE="patch"
            fi
            
            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
            echo "Next version: $NEW_VERSION (bump type: $BUMP_TYPE)"
          fi

      - name: Check if version already exists
        id: check-version
        run: |
          NEW_VERSION="${{ steps.calc-version.outputs.new_version }}"
          if git tag --list | grep -q "^$NEW_VERSION$"; then
            echo "Version $NEW_VERSION already exists, skipping release"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi

      - name: Get recent commits
        id: get-commits
        if: steps.check-version.outputs.should_release == 'true'
        run: |
          LATEST_TAG="${{ steps.get-latest-tag.outputs.latest_tag }}"
          
          # Get commits for release notes
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            # First release - get all commits
            COMMITS=$(git log --oneline -10 --pretty=format:"- %s (%h)" 2>/dev/null || echo "- Initial commit")
          else
            # Regular release - get commits since last tag
            COMMITS=$(git log $LATEST_TAG..HEAD --oneline --pretty=format:"- %s (%h)" 2>/dev/null || echo "- No new commits")
          fi
          
          echo "recent_commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.check-version.outputs.should_release == 'true'
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        with:
          tag_name: ${{ steps.calc-version.outputs.new_version }}
          name: Release ${{ steps.calc-version.outputs.new_version }}
          body: |
            ## Release ${{ steps.calc-version.outputs.new_version }}
            
            **Release type:** ${{ steps.calc-version.outputs.bump_type == 'initial' && 'Initial release' || format('{0} version bump', steps.calc-version.outputs.bump_type) }}
            
            ### ${{ steps.calc-version.outputs.bump_type == 'initial' && 'Initial Features' || 'Recent Changes' }}:
            ${{ steps.get-commits.outputs.recent_commits }}
            
            ### Installation
            
            Use this version in your `.pre-commit-config.yaml`:
            
            ```yaml
            repos:
              - repo: https://github.com/Gosayram/commit-mgmt
                rev: ${{ steps.calc-version.outputs.new_version }}
                hooks:
                  - id: commit-msg-format
            ```
            
            ### Quick Setup
            
            1. Install pre-commit: `pip install pre-commit` or `brew install pre-commit`
            2. Add the configuration above to your `.pre-commit-config.yaml`
            3. Install hooks: `pre-commit install --hook-type commit-msg`
            
            ### Documentation
            
            - [Setup Guide](https://github.com/Gosayram/commit-mgmt/blob/main/docs/SETUP_GUIDE.md)
            - [Example Configuration](https://github.com/Gosayram/commit-mgmt/blob/main/example.pre-commit-config.yaml)
            - [README](https://github.com/Gosayram/commit-mgmt/blob/main/README.md)
            
            ---
            
            ${{ steps.calc-version.outputs.bump_type == 'initial' && '**This is the first release of this project!**' || format('**Full Changelog**: https://github.com/Gosayram/commit-mgmt/compare/{0}...{1}', steps.get-latest-tag.outputs.latest_tag, steps.calc-version.outputs.new_version) }}
          draft: false
          prerelease: false
          generate_release_notes: false